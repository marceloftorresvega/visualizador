/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tensa.visualizador;

import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.tensa.stlobjects.camara.Camara;
import org.tensa.stlobjects.codec.ObjCodec;
import org.tensa.stlobjects.codec.StlCodec;
import org.tensa.stlobjects.poliedro.EsferaGeodecica;
import org.tensa.stlobjects.poliedro.IndexadoTriangular;
import org.tensa.stlobjects.poliedro.StlObject;
import org.tensa.stlobjects.soporte.Atril;
import org.tensa.tensada.matrix.Dominio;
import org.tensa.tensada.matrix.DoubleMatriz;
import org.tensa.tensada.matrix.Indice;
import org.tensa.tensada.matrix.NumericMatriz;
import org.tensa.tensada.vector.Double3DVector;
import org.tensa.tensada.vector.impl.DoubleVector3DImpl;

/**
 *
 * @author mtorres
 */
public class PrimerFrame extends javax.swing.JFrame {

    private EsferaGeodecica gizmo;
    private Camara camara;
    private Atril camaraAtril;
    private Atril esferaAtril;
    
    private DoubleVector3DImpl cachedEje;
    private double cachedAngle;
    private boolean isRodillo = true;
    private final List<SpacePolygon> camara1PolygonList = new ArrayList<>();
    private final List<SpacePolygon> flatCamara1PolygonList = new ArrayList<>();
    private final List<SpacePolygon> flatCamara2PolygonList = new ArrayList<>();
    private final List<SpacePolygon> flatCamara3PolygonList = new ArrayList<>();
    private final ArrayList<Atril> modelos = new ArrayList<>();
    

    /**
     * Get the value of isRodillo
     *
     * @return the value of isRodillo
     */
    public boolean isIsRodillo() {
        return isRodillo;
    }

    /**
     * Set the value of isRodillo
     *
     * @param isRodillo new value of isRodillo
     */
    public void setIsRodillo(boolean isRodillo) {
        this.isRodillo = isRodillo;
    }

    /**
     * Creates new form PrimerFrame
     */
    public PrimerFrame() {
        initComponents();
        initModels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        perspectivaGroup = new javax.swing.ButtonGroup();
        rotacionGroup = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jButtonInicia = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanelXz = new javax.swing.JPanel();
        jPanelYz = new javax.swing.JPanel();
        jPanelCamera = advancedWiredPanel();
        jPanelXy = new javax.swing.JPanel();
        jPanelCamera1 = advancedPanel();

        jFrame1.setSize(new java.awt.Dimension(543, 326));
        jFrame1.setType(java.awt.Window.Type.POPUP);

        jFileChooser1.setFileFilter(getFileFilter());
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualizador");

        jButtonInicia.setText("reiniciar");
        jButtonInicia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciaActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jLabel4.setText("H:");

        jLabel5.setText("V:");

        jLabel6.setText("D:");

        rotacionGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("rotacion rodillo");
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });

        rotacionGroup.add(jRadioButton2);
        jRadioButton2.setText("rotacion disco");
        jRadioButton2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton2StateChanged(evt);
            }
        });

        perspectivaGroup.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("sin perspectiva");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        perspectivaGroup.add(jRadioButton5);
        jRadioButton5.setText("perspectiva plana");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        perspectivaGroup.add(jRadioButton6);
        jRadioButton6.setText("persectiva al foco");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButtonInicia, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(182, 182, 182)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton2)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton5)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton6))
                        .addGap(86, 86, 86))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton4))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton5))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(jRadioButton6))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInicia)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanelXz.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelXz.setName("xz"); // NOI18N
        jPanelXz.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelXzMouseDraggedRodillo(evt);
                jPanelXzMouseDraggedDisco(evt);
            }
        });

        javax.swing.GroupLayout jPanelXzLayout = new javax.swing.GroupLayout(jPanelXz);
        jPanelXz.setLayout(jPanelXzLayout);
        jPanelXzLayout.setHorizontalGroup(
            jPanelXzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanelXzLayout.setVerticalGroup(
            jPanelXzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        jPanelYz.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelYz.setName("yz"); // NOI18N
        jPanelYz.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelYzMouseDraggedRodillo(evt);
                jPanelYzMouseDraggedDisco(evt);
            }
        });

        javax.swing.GroupLayout jPanelYzLayout = new javax.swing.GroupLayout(jPanelYz);
        jPanelYz.setLayout(jPanelYzLayout);
        jPanelYzLayout.setHorizontalGroup(
            jPanelYzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanelYzLayout.setVerticalGroup(
            jPanelYzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        jPanelCamera.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelCamera.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelCameraMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPanelCameraLayout = new javax.swing.GroupLayout(jPanelCamera);
        jPanelCamera.setLayout(jPanelCameraLayout);
        jPanelCameraLayout.setHorizontalGroup(
            jPanelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanelCameraLayout.setVerticalGroup(
            jPanelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        jPanelXy.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelXy.setName("xy"); // NOI18N
        jPanelXy.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelXyMouseDraggedRodillo(evt);
                jPanelXyMouseDraggedDisco(evt);
            }
        });

        javax.swing.GroupLayout jPanelXyLayout = new javax.swing.GroupLayout(jPanelXy);
        jPanelXy.setLayout(jPanelXyLayout);
        jPanelXyLayout.setHorizontalGroup(
            jPanelXyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        jPanelXyLayout.setVerticalGroup(
            jPanelXyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelCamera1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelCamera1Layout = new javax.swing.GroupLayout(jPanelCamera1);
        jPanelCamera1.setLayout(jPanelCamera1Layout);
        jPanelCamera1Layout.setHorizontalGroup(
            jPanelCamera1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanelCamera1Layout.setVerticalGroup(
            jPanelCamera1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanelXy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelXz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelYz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelCamera1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanelCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelCamera1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelYz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelXy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanelXz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIniciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciaActionPerformed

        initModels();

    }//GEN-LAST:event_jButtonIniciaActionPerformed

    private void initModels(){

        gizmo = new EsferaGeodecica(2, 50);
        esferaAtril = new Atril();
        esferaAtril.setNube(gizmo);
        esferaAtril.setLugar(new DoubleVector3DImpl(0, 0, 0));
        esferaAtril.setTalla(new DoubleVector3DImpl(1, 1, 1));

        camara = new Camara((double) 5000);
        camaraAtril = new Atril();
        camaraAtril.setNube(camara);
        camaraAtril.setLugar(new DoubleVector3DImpl(0, 0, -70));
        camaraAtril.setEje(new DoubleVector3DImpl(1, 0, 0));
        camaraAtril.setAngulo(Math.toRadians(0));
        camaraAtril.setTalla(new DoubleVector3DImpl(1, 1, 1));
//
//        Icosaedro icosa = new Icosaedro(25);
//        Atril icosaAtril = new Atril();
//        icosaAtril.setNube(icosa);
//        icosaAtril.setEje(new DoubleVector3DImpl(1, 0, 0));
//        icosaAtril.setAngulo(Math.toRadians(0));
//        icosaAtril.setLugar(new DoubleVector3DImpl(0, 0, 0));
//        icosaAtril.setTalla(new DoubleVector3DImpl(4, 1, 1));
//        modelos.add(icosaAtril);
//
//        CuboBase cubo = new CuboBase(30);
//        Atril cuboAtril = new Atril();
//        cuboAtril.setNube(cubo);
//        cuboAtril.setEje(new DoubleVector3DImpl(1, 0, 0));
//        cuboAtril.setAngulo(Math.toRadians(45));
//        cuboAtril.setLugar(new DoubleVector3DImpl(0, -40, 0));
//        cuboAtril.setTalla(new DoubleVector3DImpl(1, 4, 1));
//        modelos.add(cuboAtril);
//        
//        try {
//            StlObject fish = StlCodec.asciiDecode("C:\\Users\\lorenzo\\Documents\\marcelo\\modelos\\Moving_fish\\files\\moving_fish1.stl");
//            Atril fishAtril = new Atril();
//            fishAtril.setNube(fish);
//            fishAtril.setEje( new DoubleVector3DImpl(1, 0, 0));
//            fishAtril.setAngulo(Math.toRadians(0));
//            fishAtril.setLugar(new DoubleVector3DImpl(0, 0, 0));
//            fishAtril.setTalla(new DoubleVector3DImpl(2, 2, 4));
//            modelos.add(fishAtril);
//        } catch (IOException ex) {
//            Logger.getLogger(PrimerFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
//        
//        try {
//            StlObject vMask = ObjCodec.asciiDecode("C:\\Users\\lorenzo\\Documents\\marcelo\\modelos\\cadnav-1G009130546\\cadnav.com_model\\Model_D0901D48\\VMask.obj");
//            Atril vMaskAtril = new Atril();
//            vMaskAtril.setNube(vMask);
//            vMaskAtril.setEje( new DoubleVector3DImpl(1, 0, 0));
//            vMaskAtril.setAngulo(Math.toRadians(0));
//            vMaskAtril.setLugar(new DoubleVector3DImpl(0, 0, 0));
//            vMaskAtril.setTalla(new DoubleVector3DImpl(16, 16, 16));
//            modelos.add(vMaskAtril);
//        } catch (IOException ex) {
//            Logger.getLogger(PrimerFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
        
    }
    

    private void drawByAngle(DoubleVector3DImpl eje, double angle) {

        jPanelXy.getGraphics().clearRect(5, 5, jPanelXy.getWidth() - 10, jPanelXy.getHeight() - 10);
        jPanelXz.getGraphics().clearRect(5, 5, jPanelXz.getWidth() - 10, jPanelXz.getHeight() - 10);
        jPanelYz.getGraphics().clearRect(5, 5, jPanelYz.getWidth() - 10, jPanelYz.getHeight() - 10);
        jPanelXy.getGraphics().drawRect(10, 10, 100, 100);
        jPanelXz.getGraphics().drawRect(10, 10, 100, 100);
        jPanelYz.getGraphics().drawRect(10, 10, 100, 100);
        jPanelXy.getGraphics().setColor(Color.BLACK);
        jPanelXz.getGraphics().setColor(Color.BLACK);
        jPanelYz.getGraphics().setColor(Color.BLACK);
        jPanelXy.getGraphics().setPaintMode();
        jPanelXz.getGraphics().setPaintMode();
        jPanelYz.getGraphics().setPaintMode();

        this.cachedAngle = angle;
        this.cachedEje = eje;

        Double3DVector[] gizmoPoints;

        DoubleVector3DImpl offset = new DoubleVector3DImpl(60, 60, 60);

        DoubleMatriz cr = camaraAtril.getEje().toMatriz().matrizRotacion(camaraAtril.getAngulo());

        DoubleMatriz mf = eje.toMatriz().matrizRotacion(angle);

        DoubleMatriz mfc = cr.producto(eje.toMatriz().matrizRotacion(-angle));//mf.producto(cr);

        gizmoPoints =  gizmo.getPointList()
                .stream()
                .map(Double3DVector::toMatriz)
                .map(mf::producto)
                .map(DoubleMatriz::toVector)
                .map(offset::add)
                .toArray(Double3DVector[]::new);
        

        // vistas planas esfera de referencia 
        
        gizmo.getLineIndexList().forEach( indice -> {
            Double3DVector iniPoint = gizmoPoints[indice.getFila()-1];
            Double3DVector endPoint = gizmoPoints[indice.getColumna()-1];

            jPanelXy.getGraphics()
                    .drawLine(
                            (int) iniPoint.getX(), (int) iniPoint.getY(),
                            (int) endPoint.getX(), (int) endPoint.getY());

            jPanelYz.getGraphics()
                    .drawLine(
                            (int) iniPoint.getY(), (int) iniPoint.getZ(),
                            (int) endPoint.getY(), (int) endPoint.getZ());

            jPanelXz.getGraphics()
                    .drawLine(
                            (int) iniPoint.getZ(), (int) iniPoint.getX(),
                            (int) endPoint.getZ(), (int) endPoint.getX());
        });

        //vistas planas representacion de camara
        Double3DVector[] camaraPoints = camara.getPointList()
                .stream()
                .map(DoubleVector3DImpl::toMatriz)
                .map(cr::producto)
                .map(camaraAtril.getLugar().toMatriz()::adicion)
                .map(mf::producto)
                .map(DoubleMatriz::toVector)
                .map(offset::add)
                .toArray(Double3DVector[]::new);

//        jPanelXy.getGraphics().setColor(Color.RED);
//        jPanelXz.getGraphics().setColor(Color.RED);
//        jPanelYz.getGraphics().setColor(Color.RED);
//        jPanelXy.getGraphics().setPaintMode();
//        jPanelXz.getGraphics().setPaintMode();
//        jPanelYz.getGraphics().setPaintMode();
        
        camara.getLineIndexList().forEach( indice -> {
            Double3DVector iniPoint = camaraPoints[indice.getFila()-1];
            Double3DVector endPoint = camaraPoints[indice.getColumna()-1];

            jPanelXy.getGraphics()
                    .drawLine(
                            (int) iniPoint.getX(), (int) iniPoint.getY(),
                            (int) endPoint.getX(), (int) endPoint.getY());

            jPanelYz.getGraphics()
                    .drawLine(
                            (int) iniPoint.getY(), (int) iniPoint.getZ(),
                            (int) endPoint.getY(), (int) endPoint.getZ());

            jPanelXz.getGraphics()
                    .drawLine(
                            (int) iniPoint.getZ(), (int) iniPoint.getX(),
                            (int) endPoint.getZ(), (int) endPoint.getX());
        });


        DoubleMatriz pCamara = mf.producto(camaraAtril.getLugar().toMatriz());
        DoubleMatriz matOffset = offset.toMatriz();
        camara1PolygonList.clear();

        modelos.forEach(modelo -> {

            DoubleMatriz crm = modelo.getEje().toMatriz().matrizRotacion(modelo.getAngulo())
                    .producto(new DoubleMatriz(new Dominio(3, 3))
                        .indexa(1, 1, modelo.getTalla().getX())
                        .indexa(2, 2, modelo.getTalla().getY())
                        .indexa(3, 3, modelo.getTalla().getZ()));
            
            Double3DVector[] modeloPoints =  modelo.getNube()
                    .getPointList()
                    .stream()
                    .map(point -> {
                        return crm.producto(point.toMatriz()).toVector().add(modelo.getLugar());
                    }).toArray(Double3DVector[]::new);
            
            HashMap<Integer, Double3DVector> cachePoints = new HashMap<>();
            HashMap<Integer, Double> cacheDist = new HashMap<>();
            

            IndexadoTriangular indizado = (IndexadoTriangular) modelo.getNube();

            //vistas planas
            indizado.getLineIndexList().parallelStream().forEach( indice -> {
                
                Double3DVector puntoInicio = modeloPoints[indice.getFila() - 1].add(offset);
                Double3DVector puntoFinal = modeloPoints[indice.getColumna() -1 ].add(offset);

                jPanelXy.getGraphics()
                        .drawLine(
                                (int) puntoInicio.getX(), (int) puntoInicio.getY(),
                                (int) puntoFinal.getX(), (int) puntoFinal.getY());

                jPanelYz.getGraphics()
                        .drawLine(
                                (int) puntoInicio.getY(), (int) puntoInicio.getZ(),
                                (int) puntoFinal.getY(), (int) puntoFinal.getZ());

                jPanelXz.getGraphics()
                        .drawLine(
                                (int) puntoInicio.getZ(), (int) puntoInicio.getX(),
                                (int) puntoFinal.getZ(), (int) puntoFinal.getX());

            });
            
            //vistas camara
            for(int indiceDirecto = 0; indiceDirecto < modeloPoints.length; indiceDirecto++){
                
                DoubleVector3DImpl puntoProcesado;
                DoubleMatriz puntoPreProcesado = mfc.producto(modeloPoints[indiceDirecto].toMatriz().substraccion(pCamara));
                
                cacheDist.put(indiceDirecto, Math.sqrt(puntoPreProcesado.distanciaE2().get(Indice.E1)));

                switch (alejamiento) {
                    case TO_PLANE:

                        // vector con distancia desde z
                        puntoProcesado = ((DoubleMatriz) alejamiento(puntoPreProcesado, puntoPreProcesado.get(Indice.E3)).adicion(matOffset)).toVector();

                        break;
                    case TO_FOCUS:

                        //distancia es matriz de valor unico
                        puntoProcesado = ((DoubleMatriz) alejamiento(puntoPreProcesado, cacheDist.get(indiceDirecto)).adicion(matOffset)).toVector();

                        break;
                    default:

                        puntoProcesado = ((DoubleMatriz) puntoPreProcesado.adicion(matOffset)).toVector();

                        break;
                }
                cachePoints.put(indiceDirecto, puntoProcesado);

            }
            

            //vista de camara crea poligonos
            indizado.getTriangleIndexList()
                    .forEach(triangle -> {

                        SpacePolygon polygon = new SpacePolygon();

                        triangle.stream()
                        .forEach(idx -> {
                            Double3DVector vector = cachePoints.get(idx);

                            double factor = cacheDist.get(idx);
                            polygon.distance = polygon.distance + factor / 4;

                            Double color = Math.abs(vector.getZ()) / factor / 16;

                            float[] compArray = polygon.color.getRGBColorComponents(null);
                            try{
                                polygon.color = new Color(compArray[0] + color.floatValue(), compArray[1] + color.floatValue(), compArray[2] + color.floatValue());
                            }catch( IllegalArgumentException ex){
                                polygon.color = Color.WHITE;
                            }

                            polygon.addPoint((int) vector.getX(), (int) vector.getY());

                        });
                        camara1PolygonList.add(polygon);
                    });
        });
        camara1PolygonList.sort((p1, p2) -> Double.compare(p2.distance, p1.distance));
        java.awt.EventQueue.invokeLater(() ->{
            jPanelCamera.repaint();
            jPanelCamera1.repaint();
        });

    }

    private NumericMatriz<Double> alejamiento(NumericMatriz<Double> m, double dist) {

        return m.productoEscalar(60 / dist);
    }

    private void jPanelXyMouseDraggedRodillo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelXyMouseDraggedRodillo
        if (!this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p = new DoubleVector3DImpl(evt.getX() - 60, evt.getY() - 60, 0L);

        Double distancia = Math.sqrt(p.toMatriz().distanciaE2().get(Indice.E1));
        p = (DoubleVector3DImpl) p.escalar(1 / distancia);
        jLabel1.setText(Double.toString(p.getX()));
        jLabel2.setText(Double.toString(p.getY()));
        jLabel3.setText(distancia.toString());
        
        drawByAngle(p, distancia / 50 * Math.PI);


    }//GEN-LAST:event_jPanelXyMouseDraggedRodillo

    private void jPanelYzMouseDraggedRodillo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelYzMouseDraggedRodillo

        if (!this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p = new DoubleVector3DImpl(0L, evt.getX() - 60, evt.getY() - 60);

        Double distancia = Math.sqrt(p.toMatriz().distanciaE2().get(Indice.E1));
        p = (DoubleVector3DImpl) p.escalar(1 / distancia);
        jLabel1.setText(Double.toString(p.getZ()));
        jLabel2.setText(Double.toString(p.getY()));
        jLabel3.setText(distancia.toString());
        
        drawByAngle(p, distancia / 50 * Math.PI);
    }//GEN-LAST:event_jPanelYzMouseDraggedRodillo

    private void jPanelXzMouseDraggedRodillo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelXzMouseDraggedRodillo

        if (!this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p = new DoubleVector3DImpl(evt.getY() - 60, 0L, evt.getX() - 60);

        Double distancia = Math.sqrt(p.toMatriz().distanciaE2().get(Indice.E1));
        p = (DoubleVector3DImpl) p.escalar(1 / distancia);
        jLabel1.setText(Double.toString(p.getX()));
        jLabel2.setText(Double.toString(p.getZ()));
        jLabel3.setText(distancia.toString());
        
        drawByAngle(p, distancia / 50 * Math.PI);
    }//GEN-LAST:event_jPanelXzMouseDraggedRodillo

    private void jPanelCameraMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelCameraMouseDragged

        DoubleVector3DImpl p = new DoubleVector3DImpl(evt.getY() - 60, 60 - evt.getX(), 0L);

        Double distancia = Math.sqrt(p.toMatriz().distanciaE2().get(Indice.E1));
        p = (DoubleVector3DImpl) p.escalar(1 / distancia);
        camaraAtril.setAngulo(distancia / 50 * Math.PI);
        camaraAtril.setEje(p);
        
        drawByAngle(this.cachedEje, this.cachedAngle);
    }//GEN-LAST:event_jPanelCameraMouseDragged

    private void jRadioButton2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton2StateChanged

        this.setIsRodillo(jRadioButton1.isSelected());
    }//GEN-LAST:event_jRadioButton2StateChanged

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged

        this.setIsRodillo(jRadioButton1.isSelected());
    }//GEN-LAST:event_jRadioButton1StateChanged

    private void jPanelXyMouseDraggedDisco(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelXyMouseDraggedDisco

        if (this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p1 = new DoubleVector3DImpl(evt.getX() - 60, evt.getY() - 60, 0L);
        DoubleVector3DImpl p = new DoubleVector3DImpl(0, 0, 1);

        Double distancia = Math.sqrt(p1.toMatriz().distanciaE2().get(Indice.E1));
        p1 = (DoubleVector3DImpl) p1.escalar(1 / distancia);
//        
        jLabel1.setText(Double.toString(p1.getX()));
        jLabel2.setText(Double.toString(p1.getY()));

        jLabel3.setText(Double.toString(Math.asin(p1.getY()) / Math.PI * 180));
//        
        if (p1.getX() > 0) {

            drawByAngle(p, Math.asin(p1.getY()));
        } else {

            drawByAngle(p, Math.PI - Math.asin(p1.getY()));
        }

    }//GEN-LAST:event_jPanelXyMouseDraggedDisco

    private void jPanelYzMouseDraggedDisco(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelYzMouseDraggedDisco

        if (this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p1 = new DoubleVector3DImpl(evt.getX() - 60, evt.getY() - 60, 0L);
        DoubleVector3DImpl p = new DoubleVector3DImpl(1, 0, 0);

        Double distancia = Math.sqrt(p1.toMatriz().distanciaE2().get(Indice.E1));
        p1 = (DoubleVector3DImpl) p1.escalar(1 / distancia);
//        
        jLabel1.setText(Double.toString(p1.getX()));
        jLabel2.setText(Double.toString(p1.getY()));

        jLabel3.setText(Double.toString(Math.asin(p1.getY()) / Math.PI * 180));
//        

        if (p1.getX() > 0) {

            drawByAngle(p, Math.asin(p1.getY()));
        } else {

            drawByAngle(p, Math.PI - Math.asin(p1.getY()));
        }
    }//GEN-LAST:event_jPanelYzMouseDraggedDisco

    private void jPanelXzMouseDraggedDisco(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelXzMouseDraggedDisco

        if (this.isRodillo) {
            return;
        }

        DoubleVector3DImpl p1 = new DoubleVector3DImpl(evt.getX() - 60, evt.getY() - 60, 0L);
        DoubleVector3DImpl p = new DoubleVector3DImpl(0, 1, 0);

        Double distancia = Math.sqrt(p1.toMatriz().distanciaE2().get(Indice.E1));
        p1 = (DoubleVector3DImpl) p1.escalar(1 / distancia);
//        
        jLabel1.setText(Double.toString(p1.getX()));
        jLabel2.setText(Double.toString(p1.getY()));

        jLabel3.setText(Double.toString(Math.asin(p1.getY()) / Math.PI * 180));
//        

        if (p1.getX() > 0) {

            drawByAngle(p, Math.asin(p1.getY()));
        } else {

            drawByAngle(p, Math.PI - Math.asin(p1.getY()));
        }
    }//GEN-LAST:event_jPanelXzMouseDraggedDisco

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed

        alejamiento = Perspective.NONE;
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed

        alejamiento = Perspective.TO_PLANE;
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed

        alejamiento = Perspective.TO_FOCUS;
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jFrame1.pack();
        jFrame1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        if(JFileChooser.APPROVE_SELECTION.equals(evt.getActionCommand())) {
            File selectedFile = jFileChooser1.getSelectedFile();
            
            try {
                StlObject loadedObject = null;
                if(selectedFile.getName().endsWith("obj")){
                    loadedObject = ObjCodec.asciiDecode(selectedFile.getPath());
                }
                if(selectedFile.getName().endsWith("stl")){
                    try {
                    loadedObject = StlCodec.asciiDecode(selectedFile.getPath());
                    } catch (NullPointerException ex) {
                        loadedObject = StlCodec.binaryDecode(selectedFile.getPath());
                    }
                }
                Atril loadedSupport = new Atril();
                loadedSupport.setNube(loadedObject);
                loadedSupport.setEje( new DoubleVector3DImpl(1, 0, 0));
                loadedSupport.setAngulo(Math.toRadians(0));
                loadedSupport.setLugar(new DoubleVector3DImpl(0, 0, 0));
                loadedSupport.setTalla(new DoubleVector3DImpl(16, 16, 16));
                modelos.add(loadedSupport);
            } catch (IOException ex) {
                Logger.getLogger(PrimerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jFrame1.setVisible(false);
        } else {
            jFrame1.setVisible(false);
        }
         
                 
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        modelos.clear();
        camara1PolygonList.clear();
        java.awt.EventQueue.invokeLater(() ->{
            jPanelCamera.repaint();
            jPanelCamera1.repaint();
        });
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private javax.swing.filechooser.FileFilter getFileFilter(){
        javax.swing.filechooser.FileNameExtensionFilter ff = new FileNameExtensionFilter("Archivos STL, WaveFront", "stl","obj");
        return ff;
    }
    private javax.swing.JPanel advancedPanel() {
        return new javax.swing.JPanel() {
            @Override
            public void paint(Graphics g) {
                super.paint(g);
                if (camara1PolygonList != null) {

                    g.setColor(Color.BLUE);
                    g.setPaintMode();
                    g.drawRect(10, 10, 100, 100);
                    camara1PolygonList.forEach(polygon -> {
                        g.setColor(polygon.color);
                        g.fillPolygon(polygon);
                    });

                }
            }

        };
    }

    private javax.swing.JPanel advancedWiredPanel() {
        return new javax.swing.JPanel() {
            @Override
            public void paint(Graphics g) {
                super.paint(g);
                if (camara1PolygonList != null) {

                    g.setColor(Color.BLUE);
                    g.setPaintMode();
                    g.drawRect(10, 10, 100, 100);
                    camara1PolygonList.forEach(polygon -> {
                        g.setColor(polygon.color);
                        g.drawPolygon(polygon);
                    });

                }
            }

        };
    }

    private Perspective alejamiento = Perspective.NONE;

    /**
     * Get the value of alejamiento
     *
     * @return the value of alejamiento
     */
    public Perspective getAlejamiento() {
        return alejamiento;
    }

    /**
     * Set the value of alejamiento
     *
     * @param alejamiento new value of alejamiento
     */
    public void setAlejamiento(Perspective alejamiento) {
        this.alejamiento = alejamiento;
    }

    private enum Perspective {

        NONE, TO_PLANE, TO_FOCUS
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrimerFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonInicia;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelCamera;
    private javax.swing.JPanel jPanelCamera1;
    private javax.swing.JPanel jPanelXy;
    private javax.swing.JPanel jPanelXz;
    private javax.swing.JPanel jPanelYz;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.ButtonGroup perspectivaGroup;
    private javax.swing.ButtonGroup rotacionGroup;
    // End of variables declaration//GEN-END:variables
}
